#!/usr/bin/env python3
"""
GraphQL Query Injection Testing Module
"""

import aiohttp
import json
import asyncio
from typing import List, Dict, Any

class QueryInjector:
    def __init__(self, endpoint: str):
        self.endpoint = endpoint
        
    async def test_field_suggestion(self, field_names: List[str]) -> Dict[str, Any]:
        """Test GraphQL field suggestion vulnerability"""
        results = {}
        
        async with aiohttp.ClientSession() as session:
            for field_name in field_names:
                # Try common field patterns
                test_queries = [
                    f"query {{ {field_name} {{ id }} }}",
                    f"query {{ {field_name}(id: 1) {{ id name }} }}",
                    f"query {{ {field_name}List {{ id }} }}",
                    f"query {{ get{field_name.capitalize()} {{ id }} }}"
                ]
                
                for query in test_queries:
                    payload = {"query": query}
                    
                    try:
                        async with session.post(self.endpoint, json=payload) as response:
                            if response.status == 200:
                                data = await response.json()
                                
                                if 'data' in data and data['data'] is not None:
                                    if field_name not in results:
                                        results[field_name] = []
                                    results[field_name].append({
                                        'query': query,
                                        'response': data
                                    })
                                
                                # Check for field suggestions in errors
                                if 'errors' in data:
                                    for error in data['errors']:
                                        if 'suggestions' in str(error):
                                            results[field_name] = results.get(field_name, [])
                                            results[field_name].append({
                                                'query': query,
                                                'suggestions': error
                                            })
                    
                    except Exception as e:
                        continue
        
        return results
    
    async def test_query_depth_attack(self, max_depth: int = 10) -> Dict[str, Any]:
        """Test query depth attacks"""
        results = {}
        
        for depth in range(1, max_depth + 1):
            query = self._generate_deep_query(depth)
            payload = {"query": query}
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(self.endpoint, json=payload) as response:
                        data = await response.json()
                        
                        results[depth] = {
                            'status': response.status,
                            'response': data,
                            'vulnerable': response.status == 200 and 'data' in data
                        }
                        
                        if response.status != 200:
                            break
                            
            except Exception as e:
                results[depth] = {'error': str(e)}
                break
        
        return results
    
    def _generate_deep_query(self, depth: int) -> str:
        """Generate a deeply nested query"""
        if depth == 1:
            return "query { __typename }"
        
        query = "query { "
        for i in range(depth):
            query += f"level{i} {{ __typename "
        
        query += " __typename " + " }" * depth
        query += " }"
        
        return query
    
    async def test_batch_query_attack(self, queries: List[str]) -> Dict[str, Any]:
        """Test batch query attacks"""
        batch_payload = []
        
        for i, query in enumerate(queries):
            batch_payload.append({
                "query": query,
                "variables": {},
                "operationName": f"batch_{i}"
            })
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.endpoint, json=batch_payload) as response:
                    return {
                        'status': response.status,
                        'response': await response.json(),
                        'vulnerable': response.status == 200
                    }
        except Exception as e:
            return {'error': str(e)}